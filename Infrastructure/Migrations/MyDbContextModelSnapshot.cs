// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Cloth.Clothes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OriginId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RentalPrice")
                        .HasColumnType("int");

                    b.Property<int>("RentalTime")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TypeClothesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.HasIndex("TypeClothesId");

                    b.ToTable("Clothes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Màu trắng",
                            Name = "Váy công sở Zara",
                            OriginId = 1,
                            Price = 89.99m,
                            RentalPrice = 200000,
                            RentalTime = 0,
                            Size = 3,
                            Status = 1,
                            TypeClothesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Màu đen",
                            Name = "Áo công sở Uniqlo",
                            OriginId = 2,
                            Price = 58.99m,
                            RentalPrice = 100000,
                            RentalTime = 0,
                            Size = 2,
                            Status = 1,
                            TypeClothesId = 2
                        });
                });

            modelBuilder.Entity("Domain.Cloth.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Origin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Korea",
                            Name = "Zara"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Japan",
                            Name = "Uniqlo"
                        });
                });

            modelBuilder.Entity("Domain.Cloth.TypeClothes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeClothes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Limit = 15,
                            Name = "Váy"
                        },
                        new
                        {
                            Id = 2,
                            Limit = 20,
                            Name = "Áo"
                        });
                });

            modelBuilder.Entity("Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "32 Nguyen Hue Str, Hue",
                            FullName = "Chau Hoang Bich Du",
                            Phone = "0943357474"
                        },
                        new
                        {
                            Id = 2,
                            Address = "42 Nguyen Hue Str, Ha Noi",
                            FullName = "Chau Chi Khanh",
                            Phone = "0935727272"
                        });
                });

            modelBuilder.Entity("Domain.Invoices.DetailInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClothesId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DetailInvoice", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothesId = 1,
                            InvoiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClothesId = 2,
                            InvoiceId = 1
                        });
                });

            modelBuilder.Entity("Domain.Invoices.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Invoice", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Discount = 0,
                            StaffId = 1
                        });
                });

            modelBuilder.Entity("Domain.Laundries.Laundry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Laundry", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "56 Nguyen Hue Str, Hue",
                            Name = "O Ti",
                            Phone = "0943357373",
                            Rate = 3
                        },
                        new
                        {
                            Id = 2,
                            Address = "42 Hai Ba Trung Str, Hue",
                            Name = "O Mi",
                            Phone = "0935727276",
                            Rate = 4
                        });
                });

            modelBuilder.Entity("Domain.LaundryInvoices.DetailInvoiceLaundry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClothesId")
                        .HasColumnType("int");

                    b.Property<int>("LaundryInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DetailInvoiceLaundry", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothesId = 1,
                            LaundryInvoiceId = 1,
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 2,
                            ClothesId = 2,
                            LaundryInvoiceId = 1,
                            Price = 0.99m
                        });
                });

            modelBuilder.Entity("Domain.LaundryInvoices.LaundryInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LaundryId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LaundryInvoice", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2023, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LaundryId = 2,
                            StaffId = 1
                        });
                });

            modelBuilder.Entity("Domain.Staffs.RoleStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoleStaff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("Domain.Staffs.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "5/6 Nguyen Cong Tru Str, Hue",
                            Birthday = new DateTime(2001, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenCode = "04321842241",
                            CreatedDate = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@abc.com",
                            FullName = "Nguyen Thi Kim Tuyen",
                            Password = "SS1JiBmooIzUmIjlbQEUet0eMI/KvUUX5j9E/Qk/Bf8=",
                            Phone = "0943357323",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "5/10 Nguyen Hue Str, Hue",
                            Birthday = new DateTime(1989, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CitizenCode = "04242144124",
                            CreatedDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tai@gmail.com",
                            FullName = "Nguyen Van Tai",
                            Password = "SS1JiBmooIzUmIjlbQEUet0eMI/KvUUX5j9E/Qk/Bf8=",
                            Phone = "0943357329",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Domain.Cloth.Clothes", b =>
                {
                    b.HasOne("Domain.Cloth.Origin", "Origin")
                        .WithMany("Clothes")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Cloth.TypeClothes", "TypeClothes")
                        .WithMany("Clothes")
                        .HasForeignKey("TypeClothesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");

                    b.Navigation("TypeClothes");
                });

            modelBuilder.Entity("Domain.Invoices.DetailInvoice", b =>
                {
                    b.HasOne("Domain.Cloth.Clothes", "Cloth")
                        .WithMany("DetailInvoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Invoices.Invoice", "Invoice")
                        .WithMany("DetailInvoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cloth");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Invoices.Invoice", b =>
                {
                    b.HasOne("Domain.Customers.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Staffs.Staff", "Staff")
                        .WithMany("Invoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.LaundryInvoices.DetailInvoiceLaundry", b =>
                {
                    b.HasOne("Domain.Cloth.Clothes", "Cloth")
                        .WithMany("DetailInvoiceLaundries")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.LaundryInvoices.LaundryInvoice", "LaundryInvoice")
                        .WithMany("DetailInvoiceLaundries")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cloth");

                    b.Navigation("LaundryInvoice");
                });

            modelBuilder.Entity("Domain.LaundryInvoices.LaundryInvoice", b =>
                {
                    b.HasOne("Domain.Laundries.Laundry", "Laundry")
                        .WithMany("LaundryInvoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Staffs.Staff", "Staff")
                        .WithMany("LaundryInvoices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laundry");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Staffs.Staff", b =>
                {
                    b.HasOne("Domain.Staffs.RoleStaff", "RoleStaff")
                        .WithMany("Staffs")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleStaff");
                });

            modelBuilder.Entity("Domain.Cloth.Clothes", b =>
                {
                    b.Navigation("DetailInvoiceLaundries");

                    b.Navigation("DetailInvoices");
                });

            modelBuilder.Entity("Domain.Cloth.Origin", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("Domain.Cloth.TypeClothes", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("Domain.Customers.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Invoices.Invoice", b =>
                {
                    b.Navigation("DetailInvoices");
                });

            modelBuilder.Entity("Domain.Laundries.Laundry", b =>
                {
                    b.Navigation("LaundryInvoices");
                });

            modelBuilder.Entity("Domain.LaundryInvoices.LaundryInvoice", b =>
                {
                    b.Navigation("DetailInvoiceLaundries");
                });

            modelBuilder.Entity("Domain.Staffs.RoleStaff", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Domain.Staffs.Staff", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("LaundryInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
